{"version":3,"sources":["logo.svg","components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Titles","className","Form","props","onSubmit","getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","description","error","API_KEY","App","state","undefined","e","a","preventDefault","target","elements","value","fetch","api_call","json","data","setState","main","temp","sys","weather","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iKAAAA,EAAOC,QAAU,IAA0B,kC,gJCU5BC,G,WARA,kBAEX,6BACI,wBAAIC,UAAU,0BAAd,kBACA,uBAAGA,UAAU,4CAAb,qDCGOC,EAPF,SAAAC,GAAK,OACd,0BAAMC,SAAUD,EAAME,YAClB,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,aAC3C,2BAAOF,KAAK,OAAOC,KAAK,UAAUC,YAAY,gBAC9C,iDC6BOC,EA/BC,SAAAN,GAAK,OACjB,yBAAKF,UAAU,iBACVE,EAAMO,MAAQP,EAAMQ,SAAW,uBAAGV,UAAU,gBAAb,aAAsC,0BAAMA,UAAU,kBAAhB,IAAmCE,EAAMO,KAAzC,KAAiDP,EAAMQ,QAAvD,KAAtC,KAC/BR,EAAMS,aAAe,uBAAGX,UAAU,gBAAb,gBAAyC,0BAAMA,UAAU,kBAAhB,KAAoCE,EAAMS,YAA1C,KAAzC,KACrBT,EAAMU,UAAY,uBAAGZ,UAAU,gBAAb,aAAsC,0BAAMA,UAAU,kBAAhB,KAAoCE,EAAMU,UAAhF,KAClBV,EAAMW,aAAe,uBAAGb,UAAU,gBAAb,cAAuC,0BAAMA,UAAU,kBAAhB,IAAmCE,EAAMW,aAAhF,KACrBX,EAAMY,OAAS,uBAAGd,UAAU,kBAAb,KAAiCE,EAAMY,SCFzDC,G,MAAU,oCA0EDC,E,2MAvEbC,MAAQ,CACNN,iBAAaO,EACbT,UAAMS,EACNR,aAASQ,EACTN,cAAUM,EACVL,iBAAaK,EACbJ,WAAOI,G,EAGTd,W,sCAAa,WAAOe,GAAP,qBAAAC,EAAA,4DACXD,EAAEE,iBACIZ,EAAOU,EAAEG,OAAOC,SAASd,KAAKe,MAC9Bd,EAAUS,EAAEG,OAAOC,SAASb,QAAQc,MAH/B,SAIYC,MAAM,oDAAD,OAAqDhB,EAArD,YAA6DC,EAA7D,kBAA8EK,EAA9E,kBAJjB,cAILW,EAJK,gBAKQA,EAASC,OALjB,OAKLC,EALK,OAMPnB,GAAQC,EACV,EAAKmB,SAAS,CACZlB,YAAaiB,EAAKE,KAAKC,KACvBtB,KAAMmB,EAAKtB,KACXI,QAASkB,EAAKI,IAAItB,QAClBE,SAAUgB,EAAKE,KAAKlB,SACpBC,YAAae,EAAKK,QAAQ,GAAGpB,YAC7BC,MAAO,KAGT,EAAKe,SAAS,CACZlB,iBAAaO,EACbT,UAAMS,EACNR,aAASQ,EACTN,cAAUM,EACVL,iBAAaK,EACbJ,MAAO,2BAtBA,0C,8HA2BX,OACE,6BACE,yBAAKd,UAAU,WACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,4BACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,2BACf,kBAAC,EAAD,CAAMI,WAAY8B,KAAK9B,aACrB,kBAAC,EAAD,CACEO,YAAauB,KAAKjB,MAAMN,YACxBF,KAAMyB,KAAKjB,MAAMR,KACjBC,QAASwB,KAAKjB,MAAMP,QACpBE,SAAUsB,KAAKjB,MAAML,SACrBC,YAAaqB,KAAKjB,MAAMJ,YACxBC,MAAOoB,KAAKjB,MAAMH,kB,GAtDpBqB,IAAMC,WCEJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.1721c957.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\n\r\nconst Titles = () => (\r\n\r\n    <div>\r\n        <h1 className=\"title-container__title\">Weather finder</h1>\r\n        <p className=\"title-container__субtitle\"> Find out temperature, conditions and maore...</p>\r\n    </div>\r\n)\r\n\r\nexport default Titles;\r\n","import React from 'react'\r\n\r\nconst Form = props => (\r\n    <form onSubmit={props.getWeather}>\r\n        <input type=\"text\" name=\"city\" placeholder=\"City ...\" />\r\n        <input type=\"text\" name=\"country\" placeholder=\"Country ...\" />\r\n        <button>Get Weather</button>\r\n    </form>\r\n)\r\nexport default Form;\r\n","import React from 'react'\r\n\r\n\r\n//If we do not have any state, we should use const instead of class\r\nconst Weather = props => (\r\n    <div className=\"weather__info\">\r\n        {props.city && props.country && <p className=\"weather__key\">Location: <span className=\"weather__value\"> {props.city}, {props.country} </span> </p>}\r\n        {props.temperature && <p className=\"weather__key\">Temperature: <span className=\"weather__value\">  {props.temperature} </span> </p>}\r\n        {props.humidity && <p className=\"weather__key\">Humidity: <span className=\"weather__value\">  {props.humidity}</span> </p>}\r\n        {props.description && <p className=\"weather__key\">Condition: <span className=\"weather__value\"> {props.description}</span> </p>}\r\n        {props.error && <p className=\"weather__error\">  {props.error}</p>}\r\n    </div>\r\n)\r\n\r\n\r\n//If we do not have any state, we should use const instead of class\r\n// class Weather extends React.Component {\r\n//     render() {\r\n//         return (\r\n//             <div>\r\n//                 {this.props.city && this.props.country && <p>Location: {this.props.city}, {this.props.country}</p>}\r\n//                 {this.props.temperature &&  <p>Temperature: {this.props.temperature}</p>}\r\n//                 {this.props.humidity &&  <p>Humidity: {this.props.humidity}</p>}\r\n//                 {this.props.description &&  <p>Condition: {this.props.description}</p>}\r\n//                 {this.props.error &&  <p> {this.props.error}</p>}\r\n\r\n//             </div>\r\n\r\n//         )\r\n//     }\r\n\r\n\r\n// }\r\n\r\n\r\nexport default Weather;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Titles from './components/Titles';\nimport Form from './components/Form';\nimport Weather from './components/Weather';\nimport { async } from 'q';\n\nconst API_KEY = '6996b55a8f206f08c664a18bb3131897'\n\nclass App extends React.Component {\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined\n  }\n\n  getWeather = async (e) => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`);\n    const data = await api_call.json();\n    if (city && country) {\n      this.setState({\n        temperature: data.main.temp,\n        city: data.name,\n        country: data.sys.country,\n        humidity: data.main.humidity,\n        description: data.weather[0].description,\n        error: \"\"\n      })\n    } else {\n      this.setState({\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: \"Please enter the value\"\n      })\n    }\n  }\n  render() {\n    return (\n      <div>\n        <div className=\"wrapper\">\n          <div className=\"main\">\n            <div className=\"container\">\n              <div className=\"row\">\n                <div className=\"col-xs-5 title-container\">\n                  <Titles></Titles>\n                </div>\n                <div className=\"col-xs-5 form-container\">\n                <Form getWeather={this.getWeather}></Form>\n                  <Weather\n                    temperature={this.state.temperature}\n                    city={this.state.city}\n                    country={this.state.country}\n                    humidity={this.state.humidity}\n                    description={this.state.description}\n                    error={this.state.error}\n\n                  ></Weather>\n                </div>\n             \n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n    )\n  }\n\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./App.css\"\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}